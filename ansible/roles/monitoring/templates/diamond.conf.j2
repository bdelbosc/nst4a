################################################################################
# Diamond Configuration File
################################################################################

################################################################################
### Options for the server
[server]

# Handlers for published metrics.
handlers = diamond.handler.graphite.GraphiteHandler

# User diamond will run as
# Leave empty to use the current user
user =

# Group diamond will run as
# Leave empty to use the current group
group =

# Pid file
pid_file = /var/run/diamond.pid

# Directory to load collector modules from
collectors_path = /usr/share/diamond/collectors/

# Directory to load collector configs from
collectors_config_path = /etc/diamond/collectors/

# Number of seconds between each collector load
# collectors_load_delay = 1.0

# Directory to load handler configs from
handlers_config_path = /etc/diamond/handlers/

# Directory to load handler modules from
handlers_path = /usr/share/diamond/handlers/

# Maximum number of metrics waiting to be processed by handlers.
# When metric queue is full, new metrics are dropped.
metric_queue_size = 16384


################################################################################
### Options for handlers
[handlers]

# daemon logging handler(s)
keys = rotated_file

### Defaults options for all Handlers
[[default]]

[[GraphiteHandler]]
### Options for GraphiteHandler

# Graphite server host
host = {{hostvars[groups['management'][0]].private_ip}}

# Port to send metrics to
port = 2030

# Socket timeout (seconds)
timeout = 15

# Batch size for metrics
batch = 1

################################################################################
### Options for collectors
[collectors]

[[default]]
### Defaults options for all Collectors

# Uncomment and set to hardcode a hostname for the collector path
# Keep in mind, periods are seperators in graphite
# hostname = my_custom_hostname

# If you prefer to just use a different way of calculating the hostname
# Uncomment and set this to one of these values:

# smart             = Default. Tries fqdn_short. If that's localhost, uses hostname_short

# fqdn_short        = Default. Similar to hostname -s
# fqdn              = hostname output
# fqdn_rev          = hostname in reverse (com.example.www)

# uname_short       = Similar to uname -n, but only the first part
# uname_rev         = uname -r in reverse (com.example.www)

# hostname_short    = `hostname -s`
# hostname          = `hostname`
# hostname_rev      = `hostname` in reverse (com.example.www)

# shell             = Run the string set in hostname as a shell command and use its
#                     output(with spaces trimmed off from both ends) as the hostname.

# hostname_method = smart

# Path Prefix and Suffix
# you can use one or both to craft the path where you want to put metrics
# such as: %(path_prefix)s.$(hostname)s.$(path_suffix)s.$(metric)s
# path_prefix = servers
# path_suffix =

# Path Prefix for Virtual Machines
# If the host supports virtual machines, collectors may report per
# VM metrics. Following OpenStack nomenclature, the prefix for
# reporting per VM metrics is "instances", and metric foo for VM
# bar will be reported as: instances.bar.foo...
# instance_prefix = instances

# Default Poll Interval (seconds)
interval = 15

################################################################################
# Default enabled collectors
################################################################################

[[CPUCollector]]
enabled = True

[[DiskSpaceCollector]]
enabled = True

[[DiskUsageCollector]]
enabled = True

[[LoadAverageCollector]]
enabled = True

[[MemoryCollector]]
enabled = True

[[VMStatCollector]]
enabled = True

{% if hostname.stdout == 'management1' %}
# check mongo
{% if groups['mongo']|length > 0 %}
[[MongoDBCollector]]
enabled = True
databases = nuxeo
{% set mshosts = '' %}
{% for host in groups['mongo'] %}
{% if loop.last %}
{% set mshosts = mshosts ~ 'mongo' ~ loop.index ~ '@' + hostvars[host].private_ip ~ ':27017' %}
hosts = {{ mshosts }}
{% else %}
{% set mshosts = mshosts ~ 'mongo' ~ loop.index ~ '@' + hostvars[host].private_ip ~ ':27017,'  %}
{% endif %}
{% endfor %}
{% endif %}

{% if groups['es']|length > 0 %}
[[ElasticSearchCollector]]
enabled = True
cluster = True
{% set mshosts = '' %}
{% for host in groups['es'] %}
{% if loop.last %}
{% set mshosts = mshosts ~ 'elastic' ~ loop.index ~ '@' ~ hostvars[host].private_ip %}
instances = {{ mshosts }}
{% else %}
{% set mshosts = mshosts ~ 'elastic' ~ loop.index + '@' ~ hostvars[host].private_ip ~ ','  %}
{% endif %}
{% endfor %}
{% endif %}

[[RedisCollector]]
enabled = True
instances = redis1@{{redis_hosts[0]}}
{% endif %}

################################################################################
### Options for logging
# for more information on file format syntax:
# http://docs.python.org/library/logging.config.html#configuration-file-format

[loggers]

keys = root

# handlers are higher in this config file, in:
# [handlers]
# keys = ...

[formatters]

keys = default

[logger_root]

# to increase verbosity, set DEBUG
level = INFO
handlers = rotated_file
propagate = 1

[handler_rotated_file]

class = handlers.TimedRotatingFileHandler
level = DEBUG
formatter = default
# rotate at midnight, each day and keep 7 days
args = ('/var/log/diamond/diamond.log', 'midnight', 1, 7)

[formatter_default]

format = [%(asctime)s] [%(threadName)s] %(message)s
datefmt =

